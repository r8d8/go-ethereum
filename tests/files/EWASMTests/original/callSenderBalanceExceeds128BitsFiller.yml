# Test for CALL with value
callSenderBalanceExceeds128Bits:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 100000000000
      code: ''
      nonce: '0x4'
      storage: {}
    deadbeef00000000000000000000000000000001:
      balance: 100000000000
      code: ''
      nonce: ''
      storage: {}
    deadbeef00000000000000000000000000000000:
      balance: 340282366920938463463374607431768211600
      nonce: ''
      storage: {}
      code: |
        (module
          (import "ethereum" "call" (func $call (param i64 i32 i32 i32 i32) (result i32)))
          (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))

          (memory 1)
          (data (i32.const 0) "\de\ad\be\ef\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01")
          ;; init mem
          (data (i32.const 32) "\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00") ;; 1
          (export "memory" (memory 0))
          (export "main" (func $main))

          (func $main
            ;; locals
            (local $memStart i32)
            (local $ptrStorageKey1 i32)
            (local $ptrValue i32)
            (local $ptrData i32)
            (local $ptrResult i32)

            ;; init
            (set_local $memStart (i32.const 32))

            ;; init pointers
            (set_local $ptrStorageKey1 (get_local $memStart))
            (set_local $ptrValue (i32.add (get_local $memStart) (i32.const 32)))
            (set_local $ptrData (i32.add (get_local $memStart) (i32.const 64)))
            (set_local $ptrResult (i32.add (get_local $memStart) (i32.const 96)))

            ;; init mem
            (i32.store (get_local $ptrValue) (i32.const 0xbeef))
            (i32.store (get_local $ptrData) (i32.const 0))

            ;; call CALL with data and save result
            (i32.store
              (get_local $ptrResult)
              (call $call
                ;; gas limit
                (i64.const 200000)
                ;; address offset (stored in data section above)
                (i32.const 0)
                ;; value offset
                (get_local $ptrValue)
                ;; data offset
                (get_local $ptrData)
                ;; data length
                (i32.const 0)
              )
            )

            ;; store the result
            (call $storageStore
              (get_local $ptrStorageKey1)
              (get_local $ptrResult)
            )
          )
        )
  expect:
    - indexes:
        data: !!int -1
        gas: !!int -1
        value: !!int -1
      network:
        - ALL
      result:
        # Balances remain the same as because of:
        # InternalError: Account balance (or transaction value) exceeds 128 bits
        a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          balance: 100000000000
        deadbeef00000000000000000000000000000000:
          balance: 340282366920938463463374607431768211600
          storage: {
            # Nothing should be store due to InternalError
            1: "0"
          }
        deadbeef00000000000000000000000000000001:
          balance: 100000000000
          storage: {}
  transaction:
    data:
    - '0x'
    gasLimit:
    - '0x6acfc0'
    gasPrice: '0x01'
    nonce: '0x04'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    to: 'deadbeef00000000000000000000000000000000'
    value:
    - '0'
