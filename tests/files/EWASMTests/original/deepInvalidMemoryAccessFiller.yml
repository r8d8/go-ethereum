# Test EVMC_INVALID_MEMORY_ACCESS exception inside called contract
deepInvalidMemoryAccess:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: ''
      nonce: '0x4'
      storage: {}
    deadbeef00000000000000000000000000000001:
      balance: '0'
      nonce: ''
      storage: {}
      code: |
        (module
          (import "ethereum" "finish" (func $finish (param i32 i32)))
          (import "ethereum" "codeCopy" (func $codeCopy (param i32 i32 i32)))
          (import "ethereum" "getCodeSize" (func $getCodeSize (result i32)))
          (memory 1)
          (export "memory" (memory 0))
          (export "main" (func $main))

          (func $main
            ;; locals
            (local $codeSize i32)

            ;; perform an OOB memory read, which should trap
            (set_local $codeSize (call $getCodeSize))
            (call $codeCopy
              ;; resultOffset
              (i32.const 0)
              ;; codeOffset
              ;; Set this beyond the end of the code
              (get_local $codeSize)
              ;; length
              (i32.const 10)
            )

            ;; we don't expect this to execute
            (call $finish (i32.const 0) (i32.const 0))
          )
        )
    deadbeef00000000000000000000000000000000:
      balance: '100000000000'
      nonce: ''
      storage: {}
      code: |
        (module
          (import "ethereum" "call" (func $call (param i64 i32 i32 i32 i32) (result i32)))
          (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
          (memory 1)

          ;; Location of contract to call
          (data (i32.const 512) "\de\ad\be\ef\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01")

          ;; storage keys
          (data (i32.const 32) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01") ;; 1
          (data (i32.const 64) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02") ;; 2

          (export "memory" (memory 0))
          (export "main" (func $main))

          (func $main
            ;; locals
            (local $ptrStorageKey1 i32)
            (local $ptrStorageKey2 i32)
            (local $ptrCallAddr1 i32)
            (local $ptrStorageVal1 i32)
            (local $ptrStorageVal2 i32)

            ;; memory layout and pointers
            (set_local $ptrStorageKey1 (i32.const 32))
            (set_local $ptrStorageKey2 (i32.const 64))
            (set_local $ptrStorageVal1 (i32.const 96))
            (set_local $ptrStorageVal2 (i32.const 128))

            ;; data pointers
            (set_local $ptrCallAddr1 (i32.const 512))

            ;; arbitrary data
            (i32.store (get_local $ptrStorageVal2) (i32.const 1))

            (i32.store
              (get_local $ptrStorageVal1)
              ;; we expect this call to fail
              (call $call
                ;; gas
                (i64.const 100000)
                ;; addrOffset
                (get_local $ptrCallAddr1)
                ;; valOffset
                (i32.const 0)
                ;; data offset
                (i32.const 0)
                ;; data length
                (i32.const 0)
              )
            )

            ;; Store the CALL result
            (call $storageStore
              (get_local $ptrStorageKey1)
              (get_local $ptrStorageVal1)
            )

            ;; Store an arbitrary value
            (call $storageStore
              (get_local $ptrStorageKey2)
              (get_local $ptrStorageVal2)
            )
          )
        )
  expect:
    - indexes:
        data: !!int -1
        gas: !!int -1
        value: !!int -1
      network:
        - ALL
      result:
        a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          balance: '99999838300'
        deadbeef00000000000000000000000000000000:
          storage: {
            # Expect CALL to return failure
            # $ptrStorageKey1 = 1
            1: '0x0100000000000000000000000000000000000000000000000000000000000000',
            # Expect this to be set
            # $ptrStorageKey2 = 2
            2: '0x0100000000000000000000000000000000000000000000000000000000000000'
          }
  transaction:
    data:
    - '0x'
    gasLimit:
    - '0x6acfc0'
    gasPrice: '0x01'
    nonce: '0x04'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    to: 'deadbeef00000000000000000000000000000000'
    value:
    - '0'
