createCode:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: ''
      nonce: '0x4'
      storage: {}
    # WASM source for compiled code, below:
    # a000000000000000000000000000000000000001:
    #   balance: '0'
    #   nonce: ''
    #   storage: {}
    #   code: |
    #     (module
    #       (import "ethereum" "finish" (func $finish (param i32 i32)))
    #       (memory 1)
    #       ;; dummy code, it doesn't do anything
    #       (data (i32.const 512) "\be\ef")
    #       (export "memory" (memory 0))
    #       (export "main" (func $main))

    #       (func $main
    #         ;; locals
    #         (local $memPointerCode i32)
    #         (local $codeLen i32)

    #         ;; memory, init
    #         (set_local $memPointerCode (i32.const 512))
    #         (set_local $codeLen (i32.const 2))

    #         (call $finish
    #           (get_local $memPointerCode)
    #           (get_local $codeLen)
    #         )
    #       )
    #     )
    deadbeef00000000000000000000000000000000:
      balance: '100000000000'
      nonce: ''
      storage: {}
      code: |
        (module
          (import "ethereum" "create" (func $create (param i32 i32 i32 i32) (result i32)))
          (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
          (memory 1)

          ;; the inner contract to create
          ;; see WASM source for compiled code, above
          (data (i32.const 256) "\00\61\73\6d\01\00\00\00\01\09\02\60\02\7f\7f\00\60\00\00\02\13\01\08\65\74\68\65\72\65\75\6d\06\66\69\6e\69\73\68\00\00\03\02\01\01\05\03\01\00\01\07\11\02\06\6d\65\6d\6f\72\79\02\00\04\6d\61\69\6e\00\01\0a\15\01\13\01\02\7f\41\80\04\21\00\41\02\21\01\20\00\20\01\10\00\0b\0b\09\01\00\41\80\04\0b\02\be\ef")

          ;; storage keys
          (data (i32.const 0)  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00") ;; 0
          (data (i32.const 32) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01") ;; 1
          (export "memory" (memory 0))
          (export "main" (func $main))

          (func $main
            ;; locals
            (local $codeMemLoc i32)
            (local $codeLen i32)
            (local $memPointerStorageKey1 i32)
            (local $memPointerStorageKey2 i32)
            (local $memPointerCreateValue i32)
            (local $memPointerCreateResult i32)
            (local $memPointerCreateReturnVal i32)

            ;; Location and length of code stored in (data) section above
            (set_local $codeMemLoc (i32.const 256))
            (set_local $codeLen (i32.const 102))

            ;; memory layout and pointers
            (set_local $memPointerStorageKey1 (i32.const 0))
            (set_local $memPointerStorageKey2 (i32.const 32))
            (set_local $memPointerCreateValue (i32.const 64))
            (set_local $memPointerCreateResult (i32.const 96))
            (set_local $memPointerCreateReturnVal (i32.const 128))

            ;; initialize
            ;; call create with value transfer 0
            (i32.store (get_local $memPointerCreateValue) (i32.const 0))

            ;; call CREATE and store the return success/failure value
            (i32.store
              (get_local $memPointerCreateReturnVal)
              (call $create
                ;; value offset
                (get_local $memPointerCreateValue)
                ;; data offset
                (get_local $codeMemLoc)
                ;; data length
                (get_local $codeLen)
                ;; result offset (new contract address)
                (get_local $memPointerCreateResult)
              )
            )

            (call $storageStore
              (get_local $memPointerStorageKey1)
              (get_local $memPointerCreateReturnVal)
            )

            ;; store the result (new contract address)
            (call $storageStore
              (get_local $memPointerStorageKey2)
              (get_local $memPointerCreateResult)
            )
          )
        )
  expect:
    - indexes:
        data: !!int -1
        gas: !!int -1
        value: !!int -1
      network:
        - ALL
      result:
        a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          balance: '99999921600'
        deadbeef00000000000000000000000000000000:
          storage: {
            # Expect CREATE to return success
            # $memPointerStorageKey1 = 0
            0: '0x0000000000000000000000000000000000000000000000000000000000000000',
            # Expect CREATE result to be new contract address
            # $memPointerStorageKey2 = 1
            1: '0xf2048c36a5536fea3bc71d49ed59f2c65c546eea000000000000000000000000',
          }
        # Newly-created contract
        0xf2048c36a5536fea3bc71d49ed59f2c65c546eea:
          code: '0xbeef'
          storage: {
          }
  transaction:
    data:
    - '0x'
    gasLimit:
    - '0x6acfc0'
    gasPrice: '0x01'
    nonce: '0x04'
    secretKey: "45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8"
    to: 'deadbeef00000000000000000000000000000000'
    value:
    - '0'
