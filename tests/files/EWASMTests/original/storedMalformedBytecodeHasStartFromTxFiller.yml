# Test malformed bytecode (has start) in init on create from tx
storedMalformedBytecodeHasStartFromTx:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    # tx sender
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: ''
      nonce: '0'
      storage: {}
  expect:
    - indexes:
        data: !!int -1
        gas: !!int -1
        value: !!int -1
      network:
        - ALL
      result:
        a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
          balance: '99916113919'
        # newly-created contract
        # expect code to be empty since create should fail
        6295ee1b4f6dd65047762f924ecd367c17eabf8f:
          shouldnotexist: "1"
  transaction:
    # Try to deploy this contract which uses function "start"
    #     (module
    #       (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
    #       (import "ethereum" "getAddress"   (func $getAddress   (param i32)))
    #       (memory 1)
    #       (data (i32.const 64) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01")
    #       (data (i32.const 96) "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01")
    #       (export "main" (func $main))
    #       (export "memory" (memory 0))
    #       (func $main
    #         (local $addrOffset i32)
    #         (local $keyOffset  i32)
    #         (set_local $addrOffset (i32.const 32))
    #         (set_local $keyOffset  (i32.const 0))
    #        
    #         (call $getAddress   (get_local $addrOffset))
    #         (call $storageStore (get_local $keyOffset) (get_local $addrOffset)))
    #       (start $test)
    #       (func $test
    #         (local $keyOffset i32)
    #         (local $valOffset i32)
    #         (set_local $keyOffset (i32.const 64))
    #         (set_local $valOffset (i32.const 96))
    #         (call $storageStore
    #           (get_local $keyOffset)
    #           (get_local $valOffset))))
    data:
    - |
      (module
        (import "ethereum" "finish" (func $finish (param i32 i32)))
        (memory 100)
        (data (i32.const 0)  "\00\61\73\6d\01\00\00\00\01\0d\03\60\02\7f\7f\00\60\01\7f\00\60\00\00\02\2f\02\08\65\74\68\65\72\65\75\6d\0c\73\74\6f\72\61\67\65\53\74\6f\72\65\00\00\08\65\74\68\65\72\65\75\6d\0a\67\65\74\41\64\64\72\65\73\73\00\01\03\03\02\02\02\05\03\01\00\01\07\11\02\04\6d\61\69\6e\00\02\06\6d\65\6d\6f\72\79\02\00\08\01\03\0a\2d\02\16\01\02\7f\41\20\21\00\41\00\21\01\20\00\10\01\20\01\20\00\10\00\0b\14\01\02\7f\41\c0\00\21\00\41\e0\00\21\01\20\00\20\01\10\00\0b\0b\4d\02\00\41\c0\00\0b\20\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\41\e0\00\0b\20\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01")
        (export "memory" (memory 0))
        (export "main" (func $main))
        (func $main
          (call $finish
            (i32.const 0)
            (i32.const 230))
        )
      )
    gasLimit:
    - '0x5000001'
    gasPrice: '0x01'
    nonce: '0x00'
    secretKey: 45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8
    to: ''
    value:
    - '0'
